# -*- coding: utf-8 -*-
"""gho_data_.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kQHxkEE8MaYgJ-mnVQRu0OolDT-Bo7XW
"""

!pip install web3 langchain openai langchain-experimental pandasai
!git clone https://github.com/xmc2/lfgho_data/
!cp -r /content/lfgho_data/abis/ /content/

from web3 import Web3
import json
import pandas as pd
from tqdm import tqdm
import os

# Importing libraries
import os
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from langchain_experimental.agents import create_pandas_dataframe_agent
from langchain.llms import OpenAI

#setup the api key
os.environ['OPENAI_API_KEY']=

#You can get your OpenAI API key from the OpenAI platform.



w3 = Web3(Web3.HTTPProvider("https://mainnet.infura.io/v3/5bd6b3458a3e4b68b75f46b16578eab9"))

"""Loading some of the contracts here:"""

# initializing GHO contract

gho_contract = {}
gho_contract["address"] = Web3.to_checksum_address("0x40D16FC0246aD3160Ccc09B8D0D3A2cD28aE6C2f")
with open("abis/gho_abi.json") as f:
    data = json.load(f)
    gho_contract["abi"] = data

gho = w3.eth.contract(address=gho_contract["address"], abi=gho_contract["abi"])

v3_pool_contract = {}
v3_pool_contract["address"] = Web3.to_checksum_address("0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2")
with open("abis/ethereum_v3_pool.json") as f:
    data = json.load(f)
    v3_pool_contract["abi"] = data

v3_pool = w3.eth.contract(
    address=v3_pool_contract["address"], abi=v3_pool_contract["abi"]
)

variable_debt_gho_contract = {}
variable_debt_gho_contract["address"] = Web3.to_checksum_address("0x786dBff3f1292ae8F92ea68Cf93c30b34B1ed04B")
with open("abis/gho_variable_debt_abi.json") as f:
    data = json.load(f)
    variable_debt_gho_contract["abi"] = data

variable_debt_gho = w3.eth.contract(
    address=variable_debt_gho_contract["address"], abi=variable_debt_gho_contract["abi"]
)

with open("abis/gho_interest_rate_strategy_abi.json") as f:
    data = json.load(f)

    GHOinterestRateStrategy = w3.eth.contract(
        address="0x00524e8E4C5FD2b8D8aa1226fA16b39Cad69B8A0",
        abi=data
    )

with open("abis/AaveProtocolDataProvider_abi.json") as f:
    data = json.load(f)
    aaveprotocoldataprovider = w3.eth.contract(address = "0x7B4EB56E7CD4b454BA8ff71E4518426369a138a3",
                                               abi=data)

with open("abis/UiPoolDataProviderV3_abi.json") as f:
    data = json.load(f)
    UiPoolDataProviderV3 = w3.eth.contract(address = "0x91c0eA31b49B69Ea18607702c5d9aC360bf3dE7d",
                                               abi=data)

"""#### Looking at the UiPoolDataProviderV3 contract"""

reserves_data_raw = UiPoolDataProviderV3.functions.getReservesData("0x2f39d218133AFaB8F2B819B1066c7E434Ad94E9e").call()
extracted_elements = [[z[i] for i in [0,1,2,3,4,15,16,28,13,14,46]] for z in reserves_data_raw[0]]

reserves_df = pd.DataFrame(extracted_elements, columns=['asset', 'name', 'symbol', 'decimals', 'lt','depositRate', 'borrowRate','price','liquidity_index','variabledebt_index','borrow_cap'])
reserves_df['depositRate'] = reserves_df['depositRate'] / 10**27
reserves_df['borrowRate'] = reserves_df['borrowRate'] / 10**27
reserves_df['lt'] = reserves_df['lt'] / 10**2
reserves_df['price'] = reserves_df['price'] / 10**8
reserves_df

transfer_event_signature = w3.keccak(text="Transfer(address,address,uint256)").hex()

fromBlock = 17698470 # GHO was deployed here
toBlock = w3.eth.block_number # get all blocks
blockRangeSize = 100000      # we search 100k blocks at a time

events = []
currentBlock = fromBlock

# iterate through 100k block chunks to pull all gho events
# note: we are doing that because the number of logs is too much for
# the node to handle
while currentBlock < toBlock:

    endBlock = min(currentBlock + blockRangeSize, toBlock)
    print(f'Processing blocks {currentBlock} to {endBlock}')

    event_filter = {
        'fromBlock': currentBlock,
        'toBlock': endBlock,
        'address': gho.address,
        'topics': [transfer_event_signature]
    }

    logs = w3.eth.get_logs(event_filter)

    for log in logs:
        event = gho.events.Transfer().process_receipt({'logs': [log]})
        event_data = dict(event[0]['args'])  # Convert AttributeDict to dict
        event_data['blockNumber'] = log['blockNumber']  # Add block number
        events.append(event_data)

    currentBlock = endBlock + 1

"""## GHO Collateralization Research

Bonus - if we have time:

How can we find the collateralization of GHO?
"""



#### Lets find all GHO borrowers

debt_mint_signature = w3.keccak(text="Mint(address,address,uint256,uint256)").hex()

fromBlock = 17698470         # GHO was deployed here
toBlock = w3.eth.block_number # get all blocks

variable_debt_gho_transfer_events = []

event_filter = {
    'fromBlock': fromBlock,
    'toBlock': toBlock,
    'address': variable_debt_gho.address,
    'topics': [transfer_event_signature]
}

logs = w3.eth.get_logs(event_filter)
debt_mints = []
for log in logs:
    event = variable_debt_gho.events.Transfer().process_receipt({'logs': [log]})
    debt_mint = dict(event[0]['args'])
    debt_mint['blockNumber'] = log['blockNumber']
    debt_mints.append(debt_mint)

gho_debt_holders = pd.DataFrame(debt_mints)[['to']].drop_duplicates()
# Initialize an empty list to store balances
balances = []

# Iterate over each holder and fetch their balance
for holder in gho_debt_holders['to']:
    holder_balance = variable_debt_gho.functions.balanceOf(Web3.to_checksum_address(holder)).call()
    balances.append(holder_balance)

# Add the balances as a new column to your DataFrame
gho_debt_holders['balance'] = balances

gho_debt_holders = gho_debt_holders[gho_debt_holders.balance != 0].copy()
gho_debt_holders = gho_debt_holders.rename(columns={'to': 'addr'})

x = pd.DataFrame()
for addr in tqdm(gho_debt_holders['addr'], desc="Processing addresses"):
    user_data = UiPoolDataProviderV3.functions.getUserReservesData("0x2f39d218133AFaB8F2B819B1066c7E434Ad94E9e",addr).call()
    new_row = pd.DataFrame(user_data[0], columns=['underlyingAsset', 'scaledATokenBalance', 'usageAsCollateralEnabledOnUser', 'stableBorrowRate', 'scaledVariableDebt', 'principalStableDebt', 'stableBorrowLastUpdateTimestamp'])
    new_row['addr'] = addr
    x = pd.concat([x,new_row])

positions = pd.merge(x,
         reserves_df,
         how='left',
         left_on=['underlyingAsset'],
         right_on=['asset'])
positions['aTokenValue'] = positions['scaledATokenBalance'] * positions['liquidity_index'] / 10**27 / 10**positions['decimals'] * positions['price']
positions['debtValue'] = positions['scaledVariableDebt'] * positions['variabledebt_index'] / 10**27 / 10**positions['decimals'] * positions['price']
positions['current_debt'] = positions['scaledVariableDebt'] * positions['variabledebt_index'] / 10**27 / 10**positions['decimals']

positions

!pip install openai

import pandas as pd
from pandasai import SmartDataframe
from pandasai.llm import OpenAI


# Sample DataFrame
df = positions

# Instantiate a LLM
llm = OpenAI()

df = SmartDataframe(df= positions, config={"llm": llm})

df.chat('Which are the top 5 borrow rates in AAVE markets?')

